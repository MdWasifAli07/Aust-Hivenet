import { useEffect, useRef, useState } from "react"; // React ржПрж░ useEffect, useRef, ржПржмржВ useState рж╣рзБржХ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
import { useNotify } from "../context/NotifyContext"; // useNotify рж╣рзБржХ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, ржпрж╛ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржбрзЗржЯрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ
import "../styles/notify.css"; // notify.css ржлрж╛ржЗрж▓ржЯрж┐ рж╕рзНржЯрж╛ржЗрж▓рзЗрж░ ржЬржирзНржп ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ

export default function NotificationsBell({ owner }) {
  // ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рждрж╛рж▓рж┐ржХрж╛, рж╕ржВржЦрзНржпрж╛, рж╕ржмржЧрзБрж▓рзЛ 'read' ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рж╛, рж╕ржм ржорзБржЫрзЗ ржлрзЗрж▓рж╛, ржПржмржВ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржлрж╛ржВрж╢ржи
  const { list, count, markAllRead, clear, remove } = useNotify();

  const [open, setOpen] = useState(false); // ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржбрзНрж░ржкржбрж╛ржЙржи ржЦрзБрж▓рждрзЗ ржмрж╛ ржмржирзНржз ржХрж░рждрзЗ useState ржмрзНржпржмрж╣рж╛рж░ рж╣ржЪрзНржЫрзЗ
  const ref = useRef(null); // DOM рж░рзЗржлрж╛рж░рзЗржирзНрж╕, ржпрж╛ ржХрзНрж▓рж┐ржХ ржмрж╛рж╣рж┐рж░рзЗ рж╣рж▓рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржбрзНрж░ржкржбрж╛ржЙржи ржмржирзНржз ржХрж░ржмрзЗ

  // 'owner' ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рждрж╛рж▓рж┐ржХрж╛ ржПржмржВ ржЕржкрж░рзНржпрж╛ржкрзНржд ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕ржВржЦрзНржпрж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗ
  const items = list(owner || "public"); // ржбрж┐ржлрж▓рзНржЯ 'public' owner ржмрзНржпржмрж╣рж╛рж░ рж╣ржЪрзНржЫрзЗ ржпржжрж┐ 'owner' ржирж╛ ржжрзЗржУрзЯрж╛ ржерж╛ржХрзЗ
  const unread = count(owner || "public"); // ржЕржкрж░рзНржпрж╛ржкрзНржд ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕ржВржЦрзНржпрж╛

  // ржХрзНрж▓рж┐ржХ ржмрж╛рж╣рж┐рж░рзЗ рж╣рж▓рзЗ ржбрзНрж░ржкржбрж╛ржЙржи ржмржирзНржз ржХрж░рждрзЗ useEffect ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
  useEffect(() => {
    const onDoc = (e) => {
      if (!ref.current) return;
      if (!ref.current.contains(e.target)) setOpen(false); // ржбрзНрж░ржкржбрж╛ржЙржи ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    };
    document.addEventListener("click", onDoc); // ржбржХрзБржорзЗржирзНржЯрзЗ ржХрзНрж▓рж┐ржХ рж╣рж▓рзЗ onDoc ржлрж╛ржВрж╢ржи ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗ
    return () => document.removeEventListener("click", onDoc); // ржХржорзНржкрзЛржирзЗржирзНржЯ ржЖржиржорж╛ржЙржирзНржЯ рж╣рж▓рзЗ ржЗржнрзЗржирзНржЯ рж▓рж┐рж╕рзЗржирж╛рж░ рж░рж┐ржорзБржн ржХрж░рж╛ рж╣ржмрзЗ
  }, []);

  return (
    <div className="notify" ref={ref}> {/* ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржХржорзНржкрзЛржирзЗржирзНржЯрзЗрж░ ржорзВрж▓ ржХржиржЯрзЗржЗржирж╛рж░ */}
      <button className="notify__btn" onClick={() => setOpen((v) => !v)} type="button" title="Notifications">
        {/* ржмрзЗрж▓ ржЖржЗржХржи ржПржмржВ ржЕржкрж░рзНржпрж╛ржкрзНржд ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕ржВржЦрзНржпрж╛ */}
        <span className="bell" aria-hidden>ЁЯФФ</span>
        {unread > 0 && <span className="badge">{unread}</span>} {/* ржЕржкрж░рзНржпрж╛ржкрзНржд ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржерж╛ржХрж▓рзЗ ржмрзНржпрж╛ржЬ рж╢рзЛ ржХрж░ржмрзЗ */}
      </button>

      {open && (  // ржпржжрж┐ ржбрзНрж░ржкржбрж╛ржЙржи ржУржкрзЗржи ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржбрзНрж░ржкржбрж╛ржЙржи рж░рзЗржирзНржбрж╛рж░ рж╣ржмрзЗ
        <div className="notify__drop">
          <div className="notify__head">
            <strong>Notifications</strong> {/* рж╣рзЗржбрж╛рж░рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж▓рзЗржЦрж╛ */}
            <div className="spacer" /> {/* рж╕рзНржкрзЗрж╕рж╛рж░ */}
            <button className="mini" onClick={() => markAllRead(owner || "public")} type="button">Mark all read</button> {/* рж╕ржм ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи 'read' ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рж╛рж░ ржмрж╛ржЯржи */}
            <button className="mini" onClick={() => clear(owner || "public")} type="button">Clear</button> {/* рж╕ржм ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржмрж╛ржЯржи */}
          </div>
          <div className="notify__list">
            {/* ржпржжрж┐ ржХрзЛржи ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржирж╛ ржерж╛ржХрзЗ, рждржмрзЗ 'No notifications' ржжрзЗржЦрж╛ржмрзЗ */}
            {items.length === 0 ? (
              <div className="empty">No notifications</div>
            ) : (
              // ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рждрж╛рж▓рж┐ржХрж╛, ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЗржЯрзЗржорзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ 'delete' ржмрж╛ржЯржи ржерж╛ржХржмрзЗ
              items.map(n => (
                <div key={n.id} className={"notify__item " + (n.read ? "read" : "unread")}>
                  <div className="txt">{n.text}</div> {/* ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржирзЗрж░ ржЯрзЗржХрзНрж╕ржЯ */}
                  <div className="meta">{new Date(n.ts).toLocaleString()}</div> {/* ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржирзЗрж░ ржЯрж╛ржЗржорж╕рзНржЯрзНржпрж╛ржорзНржк */}
                  <button className="mini danger" onClick={() => remove(owner || "public", n.id)} type="button">тЬХ</button> {/* ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржмрж╛ржЯржи */}
                </div>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );
}
